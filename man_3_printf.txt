.\"Modified from man(1) of FreeBSD, the NetBSD mdoc.template, and mdoc.samples.
.\"See Also:
.\"man mdoc.samples for a complete listing of options
.\"man mdoc for the short list of editing options
.\"/usr/share/misc/mdoc.template
.Dd 24/07/2025               \" DATE
.Dt _printf 1      \" Program name and manual section number
.Os Linux
.Sh _printf - manual page                 \" Section Header - required - don't modify
.Nm _printf
.\" Use .Nm macro to designate other names for the documented program.
.Nd function to mimic behaviour of standard printf() function in C
.Sh SYNOPSIS             \" Section Header - required - don't modify
.Fn "int _printf" "const char * format, ..."  
.Sh DESCRIPTION          \" Section Header - required - don't modify
The 
.Nm 
function formats and prints data to standard output (stdout) according to the 
specified format. The 
.Ar format 
specifier is a character string that contains conversion specifiers that 
indicates how the arguments should be formatted and displayed.
.sp 1
.Ss Format of the format string
.sp 1 
The format string is a character string composed of zero or more parts: ordinary
characters (which are copied unchanged to the output stream); and conversion 
specifications (which result in fetching subsequent arguments). Each conversion 
specification is introduced by the character % and followed by a 
.Ar conversion specifier.
.sp 1
.Pp 
The syntax is as follows:
.Bl -tag -indent
.It 
.Ar %[conversion specifier]
.El
.Ss Conversion specifiers
.sp 1
The following are valid 
.Ar conversion specifiers 
and their types:
.Bl -tag -width -indent
.It c
character
.It s
string
.It i, d
integer
.It %
literal percentage symbol
.El
.Sh RETURN VALUE
The 
.Nm 
function returns the number of characters printed on success, and -1 in the case 
of an error.
.Sh EXAMPLES
The following are examples of how to use the 
.Nm
function.
.Pp

.Sy Example 1:
.Ar no conversion specifier

Command: _printf("This is a string.\\n");.

Output: This is a string.

.sp 1
.Sy Example 2:
.Ar character conversion specifier

Command: _printf("Character:[%c]\\n", 'H');

Output: Character:[H]

.sp 1
.Sy Example 3:
.Ar string conversion specifier

Command: _printf("String:[%s]\\n", 'I am a string !');

Output: String:[I am a string !]

.sp 1
.Sy Example 4:
.Ar percent conversion specifier

Command: _printf("Percent:[%%]\\n");

Output: Percent:[%]

.sp 1
.Sy Example 5:
.Ar integer conversion specifier

Command: _printf("Negative:[%i]\n", -762534);

Output: Negative:[-762534]

.sp 1
.Sy Example 6:
.Ar integer conversion specifier

Command: _printf("Negative:[%d]\n", -762534);

Output: Negative:[-762534]
